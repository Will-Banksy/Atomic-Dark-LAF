<?xml version="1.0" encoding="UTF-8"?>
<!-- This is a synth laf skin xml file
Synth uses it to generate a 'Skin' or look for swing
With <state> tags, they work opposite  to CSS - The ones defined first override the ones defined later
Whereas when merging styles onto a region/component, it works like CSS - Precedence is given to styles defined later in the file -->

<synth ml-update="aware">
	<!-- A basic style, applies to all regions, as specified in the bind tag -->
	<style id="basicStyle">
		<opaque value="TRUE"/>
		<font name="DejaVu Sans" size="12"/>
		<!-- <state>
			<color value="#21252B" type="BACKGROUND"/>
			<color value="#9DA5B4" type="FOREGROUND"/>
		</state> -->
		<!-- -->
		<state> <!-- Normal state -->
			<color value="#9DA5B4" type="TEXT_FOREGROUND"/>
			<color value="#21252B" type="BACKGROUND"/>
			<color value="#9DA5B4" type="FOREGROUND"/>
			<!-- <imagePainter method="comboBoxBackground" path="images/.png" sourceInsets="2 2 2 2"/> -->
		</state>
		<state value="DISABLED"> <!-- Disabled state -->
			<color value="#6B717D" type="TEXT_FOREGROUND"/>
			<!-- <imagePainter method="comboBoxBackground" path="images/button_disabled.png" sourceInsets="2 2 2 2"/> -->
		</state>
		<state value="PRESSED"> <!-- Pressed state -->
			<color value="#DBDBDB" type="TEXT_FOREGROUND"/>
		</state>
		<state value="MOUSE_OVER"> <!-- Hovered state -->
			<color value="#DBDBDB" type="TEXT_FOREGROUND"/>
		</state>
		<!-- <state value="FOCUSED">
			<imagePainter method="comboBoxBackground" path="images/.png" sourceInsets="2 2 2 2"/>
		</state> -->
		<!-- -->
	</style>
	<bind style="basicStyle" type="region" key=".*"/>

	<!-- Style for buttons -->
	<style id="buttonStyle">
		<insets top="5" left="10" right="10" bottom="5"/>
		<state> <!-- Normal state for button -->
			<color value="#9DA5B4" type="TEXT_FOREGROUND"/>
			<imagePainter method="buttonBackground" path="images/button.png" sourceInsets="2 2 2 2"/>
		</state>
		<state value="DISABLED"> <!-- Disabled state for button -->
			<color value="#6B717D" type="TEXT_FOREGROUND"/>
			<imagePainter method="buttonBackground" path="images/button_disabled.png" sourceInsets="2 2 2 2"/>
		</state>
		<state value="MOUSE_OVER"> <!-- Hovered state for button -->
			<color value="#DBDBDB" type="TEXT_FOREGROUND"/>
			<imagePainter method="buttonBackground" path="images/button_hovered.png" sourceInsets="2 2 2 2"/>
		</state>
		<state value="PRESSED"> <!-- Pressed state for buttons -->
			<color value="#DBDBDB" type="TEXT_FOREGROUND"/>
			<imagePainter method="buttonBackground" path="images/button_pressed_alt.png" sourceInsets="2 2 2 2"/>
		</state>
	</style>
	<bind style="buttonStyle" type="region" key="Button"/>

	<!-- Style for arrow buttons -->
	<style id="arrowButton">
		<!-- <insets top="5" left="10" right="10" bottom="5"/> <! Doesn't seem to provide the required insets -->
		<property key="ArrowButton.size" type="integer" value="16"/> <!-- Determines width -->
		<!-- Draw the correct arrow button direction -->
		<imagePainter method="arrowButtonForeground" path="images/arrows/arrow_north.png" direction="NORTH" center="true"/>
		<imagePainter method="arrowButtonForeground" path="images/arrows/arrow_east.png" direction="EAST" center="true"/>
		<imagePainter method="arrowButtonForeground" path="images/arrows/arrow_south.png" direction="SOUTH" center="true"/>
		<imagePainter method="arrowButtonForeground" path="images/arrows/arrow_west.png" direction="WEST" center="true"/>
		<state> <!-- Normal state for button -->
			<imagePainter method="arrowButtonBackground" path="images/button.png" sourceInsets="2 2 2 2"/>
		</state>
		<state value="DISABLED"> <!-- Disabled state for button -->
			<imagePainter method="arrowButtonBackground" path="images/button_disabled.png" sourceInsets="2 2 2 2"/>
		</state>
		<state value="MOUSE_OVER"> <!-- Hovered state for button -->
			<imagePainter method="arrowButtonBackground" path="images/button_hovered.png" sourceInsets="2 2 2 2"/>
		</state>
		<state value="PRESSED"> <!-- Pressed state for buttons -->
			<imagePainter method="arrowButtonBackground" path="images/button_pressed_alt.png" sourceInsets="2 2 2 2"/>
		</state>
	</style>
	<bind style="arrowButton" type="region" key="ArrowButton"/>

	<!-- Style for text fields -->
	<style id="textFieldStyle">
		<insets top="5" left="10" right="10" bottom="5"/>
		<!-- For each state, have to provide multiple imagePainters, one for each text component -->
		<state> <!-- Normal state for text fields -->
			<imagePainter method="textFieldBackground" path="images/textField.png" sourceInsets="2 2 2 2"/>
			<imagePainter method="textAreaBackground" path="images/textField.png" sourceInsets="2 2 2 2"/>
			<imagePainter method="formattedTextFieldBackground" path="images/textField.png" sourceInsets="2 2 2 2"/>
			<imagePainter method="editorPaneBackground" path="images/textField.png" sourceInsets="2 2 2 2"/>
			<imagePainter method="textPaneBackground" path="images/textField.png" sourceInsets="2 2 2 2"/>
			<imagePainter method="passwordFieldBackground" path="images/textField.png" sourceInsets="2 2 2 2"/>
			<color value="#9DA5B4" type="TEXT_FOREGROUND"/>
			<color value="#568AF2" type="TEXT_BACKGROUND"/> <!-- Highlight colour consistent across all states -->
		</state>
		<state value="DISABLED"> <!-- Disabled state for text fields -->
			<imagePainter method="textFieldBackground" path="images/textField.png" sourceInsets="2 2 2 2"/>
			<imagePainter method="textAreaBackground" path="images/textField.png" sourceInsets="2 2 2 2"/>
			<imagePainter method="formattedTextFieldBackground" path="images/textField.png" sourceInsets="2 2 2 2"/>
			<imagePainter method="editorPaneBackground" path="images/textField.png" sourceInsets="2 2 2 2"/>
			<imagePainter method="textPaneBackground" path="images/textField.png" sourceInsets="2 2 2 2"/>
			<imagePainter method="passwordFieldBackground" path="images/textField.png" sourceInsets="2 2 2 2"/>
			<color value="#6B717D" type="TEXT_FOREGROUND"/>
		</state>
		<state value="FOCUSED"> <!-- Focused state for text fields -->
			<imagePainter method="textFieldBackground" path="images/textField_focused.png" sourceInsets="2 2 2 2"/>
			<imagePainter method="textAreaBackground" path="images/textField_focused.png" sourceInsets="2 2 2 2"/>
			<imagePainter method="formattedTextFieldBackground" path="images/textField_focused.png" sourceInsets="2 2 2 2"/>
			<imagePainter method="editorPaneBackground" path="images/textField_focused.png" sourceInsets="2 2 2 2"/>
			<imagePainter method="textPaneBackground" path="images/textField_focused.png" sourceInsets="2 2 2 2"/>
			<imagePainter method="passwordFieldBackground" path="images/textField_focused.png" sourceInsets="2 2 2 2"/>
			<color value="#DBDBDB" type="TEXT_FOREGROUND"/>
		</state>
	</style>
	<bind style="textFieldStyle" type="region" key="TextField"/>
	<bind style="textFieldStyle" type="region" key="TextArea"/>
	<bind style="textFieldStyle" type="region" key="FormattedTextField"/> <!-- Is overridden in the case of the JSpinner's JFormattedTextField -->
	<bind style="textFieldStyle" type="region" key="EditorPane"/>
	<bind style="textFieldStyle" type="region" key="TextPane"/>
	<bind style="textFieldStyle" type="region" key="PasswordField"/>

	<!-- Style for spinner editor -->
	<style id="spinnerEditorStyle">
		<insets top="5" left="10" right="10" bottom="5"/>
		<state> <!-- Normal state for spinner editor -->
			<imagePainter method="formattedTextFieldBackground" path="images/spinnerEditor.png" sourceInsets="2 2 2 2"/>
			<color value="#9DA5B4" type="TEXT_FOREGROUND"/>
			<color value="#568AF2" type="TEXT_BACKGROUND"/> <!-- Highlight colour consistent across all states -->
		</state>
		<state value="DISABLED"> <!-- Disabled state for spinner editor -->
			<imagePainter method="formattedTextFieldBackground" path="images/spinnerEditor.png" sourceInsets="2 2 2 2"/>
			<color value="#6B717D" type="TEXT_FOREGROUND"/>
		</state>
		<state value="FOCUSED"> <!-- Focused state for spinner editor -->
			<imagePainter method="formattedTextFieldBackground" path="images/spinnerEditor_focused.png" sourceInsets="2 2 2 2"/>
			<color value="#DBDBDB" type="TEXT_FOREGROUND"/>
		</state>
	</style>
	<bind style="spinnerEditorStyle" type="name" key="Spinner.formattedTextField"/> <!-- Overrides the style defined for all formatted text fields -->

	<!-- Style for check box / tick box as we say in this country -->
	<style id="checkBoxStyle">
		<insets top="4" left="10" right="10" bottom="5"/>
		<imageIcon id="box_unchecked" path="images/checkbox/checkbox_unchecked.png"/>
		<imageIcon id="box_checked" path="images/checkbox/checkbox_checked.png"/>
		<imageIcon id="box_unchecked_disabled" path="images/checkbox/checkbox_unchecked_disabled.png"/>
		<imageIcon id="box_checked_disabled" path="images/checkbox/checkbox_checked_disabled.png"/>
		<imageIcon id="box_unchecked_hovered" path="images/checkbox/checkbox_unchecked_hovered.png"/>
		<imageIcon id="box_unchecked_pressed" path="images/checkbox/checkbox_unchecked_pressed.png"/>
		<state> <!-- Normal state for check boxes -->
			<color value="#9DA5B4" type="TEXT_FOREGROUND"/>
			<property key="CheckBox.icon" value="box_unchecked"/>
		</state>
		<state value="DISABLED"> <!-- Disabled state for check boxes -->
			<color value="#6B717D" type="TEXT_FOREGROUND"/>
			<property key="CheckBox.icon" value="box_unchecked_disabled"/>
		</state>
		<state value="DISABLED and SELECTED"> <!-- Disabled and Selected state for check boxes -->
			<color value="#6B717D" type="TEXT_FOREGROUND"/>
			<property key="CheckBox.icon" value="box_checked_disabled"/>
		</state>
		<state value="MOUSE_OVER"> <!-- Hovered state for check boxes -->
			<color value="#DBDBDB" type="TEXT_FOREGROUND"/>
			<property key="CheckBox.icon" value="box_unchecked_hovered"/>
		</state>
		<state value="MOUSE_OVER and SELECTED"> <!-- Hovered and Selected state for check boxes -->
			<color value="#DBDBDB" type="TEXT_FOREGROUND"/>
			<property key="CheckBox.icon" value="box_checked"/>
		</state>
		<state value="PRESSED"> <!-- Pressed state for check boxes -->
			<color value="#DBDBDB" type="TEXT_FOREGROUND"/>
			<property key="CheckBox.icon" value="box_unchecked_pressed"/>
		</state>
		<state value="SELECTED"> <!-- Selected state for check boxes -->
			<color value="#9DA5B4" type="TEXT_FOREGROUND"/>
			<property key="CheckBox.icon" value="box_checked"/>
		</state>
	</style>
	<bind style="checkBoxStyle" type="region" key="CheckBox"/>

	<!-- Style for labels -->
	<style id="labelStyle">
		<insets top="5" left="10" right="10" bottom="5"/>
	</style>
	<bind style="labelStyle" type="region" key="Label"/>

	<!-- Style for combo boxes arrow buttons -->
	<style id="comboBoxBtnStyle">
		<opaque value="TRUE"/>
		<insets top="0" left="0" right="0" bottom="0"/>
		<imagePainter method="arrowButtonForeground" path="images/arrows/combobox_arrow.png" direction="SOUTH" center="true"/>
	</style>
	<bind style="comboBoxBtnStyle" type="name" key="ComboBox.arrowButton"/>

	<!-- Normally, Synth ComboBoxes can only have states ENABLED, DISABLED, and FOCUSED
	This is because of how getComponentState is defined in SynthComboBoxUI (http://jcs.mobile-utopia.com/jcs/11019_SynthComboBoxUI.java)
	It calls SynthLookAndFeel.getComponentState which returns one of those states (http://jcs.mobile-utopia.com/jcs/31977_SynthLookAndFeel.java)
	A possible solution is to implement my own ComboBoxUI (https://stackoverflow.com/questions/48634937/binding-a-custom-renderer-to-a-combobox-using-synth)
	But that doesn't seem to be working very well -->
	<!-- Annoying it may be but Aseprite has inspired me to make combo boxes work without a hover effect -->
	<style id="comboBoxStyle">
		<opaque value="TRUE"/>
		<!-- <defaultsProperty key="ComboBoxUI" type="String" value="javax.swing.plaf.metal.MetalComboBoxUI"/> -->
		<state> <!-- Normal state for combo box -->
			<color value="#9DA5B4" type="TEXT_FOREGROUND"/>
			<imagePainter method="comboBoxBackground" path="images/comboBoxDisplayArea.png" sourceInsets="2 2 2 26"/> <!-- Appropriate source insets for the image -->
		</state>
		<state value="DISABLED"> <!-- Disabled state for combo box -->
			<color value="#6B717D" type="TEXT_FOREGROUND"/>
			<imagePainter method="comboBoxBackground" path="images/comboBoxDisplayArea.png" sourceInsets="2 2 2 26"/>
		</state>
		<state value="FOCUSED"> <!-- Pressed state for combo box -->
			<color value="#DBDBDB" type="TEXT_FOREGROUND"/>
			<imagePainter method="comboBoxBackground" path="images/comboBoxDisplayArea.png" sourceInsets="2 2 2 26"/>
		</state>
	</style>
	<bind style="comboBoxStyle" type="region" key="ComboBox"/>

	<!-- Style for the editor in the combobox (when it is editable) -->
	<style id="comboBoxEditorStyle">
		<opaque value="TRUE"/>
		<state> <!-- Normal state for combo box editor -->
			<color value="#9DA5B4" type="TEXT_FOREGROUND"/>
			<imagePainter method="textFieldBackground" path="images/spinnerEditor.png" sourceInsets="2 2 2 2"/>
		</state>
		<state value="DISABLED"> <!-- Disabled state for combo box editor -->
			<color value="#6B717D" type="TEXT_FOREGROUND"/>
			<imagePainter method="textFieldBackground" path="images/spinnerEditor.png" sourceInsets="2 2 2 2"/>
		</state>
		<state value="FOCUSED"> <!-- Pressed state for combo box editor -->
			<color value="#DBDBDB" type="TEXT_FOREGROUND"/>
			<imagePainter method="textFieldBackground" path="images/spinnerEditor_focused.png" sourceInsets="2 2 2 2"/>
		</state>
	</style>
	<bind style="comboBoxEditorStyle" type="name" key="ComboBox.textField"/>

	<!-- A style for lists and tables -->
	<style id="listTableStyle">
		<opaque value="TRUE"/>
		<!-- <property key="List.cellHeight" type="integer" value="25"/> -->
		<!-- <property key="List.rendererUseListColors" type="boolean" value="false"/> -->
		<state>
			<color value="#21252B" type="BACKGROUND"/>
			<color value="#21252B" type="TEXT_BACKGROUND"/>
			<color value="#9DA5B4" type="TEXT_FOREGROUND"/>
		</state>
		<state value="SELECTED">
			<color value="#568AF2" type="TEXT_BACKGROUND"/>
			<color value="#DBDBDB" type="TEXT_FOREGROUND"/>
		</state>
	</style>
	<bind style="listTableStyle" type="region" key="List"/>
	<bind style="listTableStyle" type="region" key="Table"/>

	<!-- Style for the list renderers. This seems to affect the selected item -->
	<style id="listRenderer">
		<opaque value="TRUE"/>
		<state>
			<color value="#DBDBDB" type="TEXT_FOREGROUND"/>
		</state>
	</style>
	<bind style="listRenderer" type="name" key="List.renderer"/>

	<!-- This somehow gets me what I want. Overrides listTableStyle -->
	<style id="comboboxlistStyle">
		<opaque value="TRUE"/>
		<insets top="0" left="0" right="0" bottom="0"/>
		<state>
			<color value="#282C34" type="BACKGROUND"/>
			<color value="#568AF2" type="TEXT_BACKGROUND"/>
			<color value="#DBDBDB" type="TEXT_FOREGROUND"/>
		</state>
	</style>
	<bind style="comboboxlistStyle" type="name" key="ComboBox.list"/>

	<style id="comboboxListRenderer">
		<opaque value="TRUE"/>
		<state>
			<color value="#DBDBDB" type="TEXT_FOREGROUND"/>
		</state>
	</style>
	<bind style="comboboxListRenderer" type="name" key="ComboBox.listRenderer"/>
	<!-- - - - - - - -->

	<!-- Style for toggle buttons -->
	<style id="toggleButtonStyle">
		<insets top="5" left="10" right="10" bottom="5"/>
		<state> <!-- Normal state for toggle button -->
			<color value="#9DA5B4" type="TEXT_FOREGROUND"/>
			<imagePainter method="toggleButtonBackground" path="images/button.png" sourceInsets="2 2 2 2"/>
		</state>
		<state value="DISABLED"> <!-- Disabled state for toggle button -->
			<color value="#6B717D" type="TEXT_FOREGROUND"/>
			<imagePainter method="toggleButtonBackground" path="images/button_disabled.png" sourceInsets="2 2 2 2"/>
		</state>
		<state value="MOUSE_OVER"> <!-- Hovered state for toggle button -->
			<color value="#DBDBDB" type="TEXT_FOREGROUND"/>
			<imagePainter method="toggleButtonBackground" path="images/button_hovered.png" sourceInsets="2 2 2 2"/>
		</state>
		<state value="PRESSED"> <!-- Pressed state for toggle buttons -->
			<color value="#DBDBDB" type="TEXT_FOREGROUND"/>
			<imagePainter method="toggleButtonBackground" path="images/button_pressed_alt.png" sourceInsets="2 2 2 2"/>
		</state>
		<state value="SELECTED"> <!-- Selected state for toggle buttons -->
			<color value="#DBDBDB" type="TEXT_FOREGROUND"/>
			<imagePainter method="toggleButtonBackground" path="images/button_pressed_alt.png" sourceInsets="2 2 2 2"/>
		</state>
	</style>
	<bind style="toggleButtonStyle" type="region" key="ToggleButton"/>

	<!-- Style for panels -->
	<!-- <style id="panelStyle">
		<state>
			<color value="#21252B" type="BACKGROUND"/>
			<imagePainter method="panelBorder" path="images/border.png" sourceInsets="2 2 2 2"/>
		</state>
	</style>
	<bind style="panelStyle" type="region" key="Panel"/> -->
</synth>